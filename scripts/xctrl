#!/usr/bin/env python
# pylint: disable=W1309
'''MagAO-X Process Control

Usage:
    xctrl status [PROCNAME ...]
        - show status and last few log lines for each process (or just PROCNAME)
    xctrl inspect PROCNAME
        - connect to the tmux session for PROCNAME
    xctrl startup [PROCNAME ...]
        - start all processes in /opt/MagAOX/config/processes_${MAGAOX_ROLE}.txt (or just PROCNAME)
    xctrl shutdown [PROCNAME ...]
        - show status and last few log lines for each process (or just PROCNAME)
    xctrl restart [PROCNAME ...]
        - shutdown then startup each process (or just PROCNAME)
'''
import argparse
import psutil
import sys
import os
import subprocess
import getpass
import threading
import time
import shlex

stdout_b = os.fdopen(sys.stdout.fileno(), 'wb')
try:
    RED_SEQ = subprocess.check_output('tput setaf 1', shell=True)
    GREEN_SEQ = subprocess.check_output('tput setaf 2', shell=True)
    YELLOW_SEQ = subprocess.check_output('tput setaf 3', shell=True)
    BLUE_SEQ = subprocess.check_output('tput setaf 4', shell=True)
    RESET_SEQ = subprocess.check_output('tput sgr0', shell=True)
except subprocess.CalledProcessError:
    RED_SEQ = GREEN_SEQ = YELLOW_SEQ = BLUE_SEQ = RESET_SEQ = b''


def _make_output_funcs(color):
    def output_func(msg):
        stdout_b.write(color + msg.encode('utf8') + RESET_SEQ + b'\n')
        stdout_b.flush()

    def output_func_bytes(msg):
        stdout_b.write(color + msg + RESET_SEQ + b'\n')
        stdout_b.flush()
    return output_func, output_func_bytes


success, success_bytes = _make_output_funcs(GREEN_SEQ)
failure, failure_bytes = _make_output_funcs(RED_SEQ)
warning, warning_bytes = _make_output_funcs(YELLOW_SEQ)
info, info_bytes = _make_output_funcs(BLUE_SEQ)

DEBUG = os.environ.get('XCTRL_DEBUG') is not None
def debug(msg):
    if DEBUG:
        print(msg)

WHO_AM_I = getpass.getuser()
if os.environ.get('MAGAOX_ROLE') == 'vm':
    INSTRUMENT_USER = 'ubuntu' if os.path.exists('/home/ubuntu') else 'xsup'
else:
    INSTRUMENT_USER = 'xsup'

# sudo may live in different places depending on distro. We fall back
# to whatever `which sudo` says.
SUDO_PATHS = [
    '/usr/bin/sudo',
    '/bin/sudo',
    subprocess.check_output('which sudo', shell=True)
]

REAL_SUDO = None
for sudo_candidate in SUDO_PATHS:
    if os.path.exists(sudo_candidate):
        REAL_SUDO = sudo_candidate
if REAL_SUDO is None:
    raise RuntimeError(
        "Couldn't find sudo, which is necessary for this script to work")


def _run_as_xsup(command, capture_output=True, check=True):
    # Special case: if we're running as xsup or in the VM (as vagrant)
    # we just run the command as supplied by prepending sudo appropriately
    if WHO_AM_I != INSTRUMENT_USER:
        args = [
            REAL_SUDO,
            '-u',
            INSTRUMENT_USER,
            '-s',
            '--',
        ]
    else:
        args = []
    args.extend(shlex.split(command))
    debug(f'Running as {WHO_AM_I}: {" ".join(args)}')
    res = subprocess.run(args, capture_output=capture_output, check=check)
    return res.returncode, res.stdout, res.stderr


def _read_processes(filepath):
    processes = {}
    with open(filepath) as procfile:
        for line in procfile:
            if line[0] == '#' or len(line.strip()) == 0:
                continue
            try:
                process_name, executable = line.strip().split()
            except ValueError:
                failure(f"Could not parse line {repr(line)} from {filepath}")
                raise
            processes[process_name] = executable
    return processes


def _check_status(process_name):
    pid_filepath = f'/opt/MagAOX/sys/{process_name}/pid'
    session_exists = _session_exists(process_name)
    pid_file_exists = os.path.exists(pid_filepath)
    pid = None
    pid_exists = False
    if pid_file_exists:
        try:
            with open(pid_filepath) as pid_file:
                pid = int(pid_file.read().strip())
            pid_exists = psutil.pid_exists(pid)
        except Exception:
            pid = -1
            pid_exists = False

    return session_exists, pid_file_exists, pid, pid_exists

def _brief_status(process_name):
    session_exists, pid_file_exists, pid, pid_exists = _check_status(process_name)
    message = f"{process_name}: "
    if session_exists and pid_exists:
        success(message + f"running (pid: {pid})")
    elif session_exists and pid_file_exists and not pid_exists:
        failure(message + "dead (session exists, stale pid file)")
    elif session_exists and not pid_file_exists:
        failure(message + "session exists, but process is not running")
    elif not session_exists and not pid_file_exists:
        warning(message + "not started")
    else:
        warning(f"{session_exists=} {pid_file_exists=} {pid=} {pid_exists=}")

def status(processes, targets, role):
    if not len(targets):
        targets = processes.keys()
    debug(f"Querying status for: {list(targets)}")
    for process_name in targets:
        _brief_status(process_name)
    return 0

def _peek_logs(process_name, n_lines):
    os.system(f'logdump -n 1 {process_name} 2>&1 | tail -n {n_lines}')
    info(f"End {process_name} logs")
    print()

def peek(processes, targets, role):
    if not len(targets):
        targets = processes.keys()
    debug(f"Querying status for: {list(targets)}")
    for process_name in targets:
        _brief_status(process_name)
        _peek_logs(process_name, n_lines=10)
    return 0

def _session_exists(process_name):
    _, out, __ = _run_as_xsup(
        "tmux ls -F \"#{session_name}\"",
        check=False
    )
    sessions = out.decode('utf8').split('\n')
    return process_name in sessions

def _shutdown_helper(process_name):
    attempts = 0
    if _session_exists(process_name):
        while _session_exists(process_name):
            if attempts > 5:
                _run_as_xsup(f'tmux kill-session -t {process_name}')
                warning(f'Killed tmux session for {process_name}')
            else:
                if attempts == 0:
                    # Only interrupt the app on the first go-round so it doesn't segfault while
                    # exiting
                    code, _, __ = _run_as_xsup(f'tmux send-keys -t {process_name} C-c', check=False)
                    if code != 0:  # maybe it already exited?
                        continue
                code, _, __ = _run_as_xsup(f'tmux send-keys -t {process_name} "exit" Enter', check=False)
                if code != 0:
                    continue
                attempts += 1
                info(f'Waiting for tmux session for {process_name} to exit...')
                time.sleep(1)
        success(f'Ended tmux session for {process_name}')
    else:
        info(f'No tmux session exists named {process_name}')
    return 0


def shutdown(processes, targets, role):
    handle_indi_server = False
    if not len(targets):
        targets = list(processes.keys())
    indi_server_name = None
    for process_name in targets:
        if process_name.startswith('is'):
            indi_server_name = process_name
    if len(targets) > 1 and indi_server_name in targets:
        # special case for INDI server: needs to be last to shut down
        # or delProperty from drivers will get lost
        targets.remove(indi_server_name)
        handle_indi_server = True
    helpers = []
    for process_name in targets:
        th = threading.Thread(
            target=_shutdown_helper,
            args=(process_name,)
        )
        th.start()
        helpers.append(th)
    for th in helpers:
        th.join()
    if handle_indi_server:
        _shutdown_helper(indi_server_name)
    return 0

def _indiserver_startup(process_name, executable_name):
    '''Wraps _startup_helper to insert some zombie-removal
    '''
    # Check for zombie xindidrivers
    for proc in psutil.process_iter():
        with proc.oneshot():
            try:
                cmdline = proc.cmdline()
                exe = proc.exe()
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
            if '/opt/MagAOX/drivers' in exe and proc.ppid() == 1:
                # this proc is a zombie (reparented to PID 1)
                _run_as_xsup(f'kill -9 {proc.pid}')
                warning(f"Killing zombie: {' '.join(cmdline)}")
    return _startup_helper(process_name, executable_name)


def _startup_helper(process_name, executable_name):
    '''Start a new tmux session as the parent for a MagAO-X process
    and start the process as well.

    Parameters
    ----------
    process_name : str
        The name for the particular instance of this executable
    executable_name : str
        The executable (MagAOXApp) name

    Returns
    -------
    did_anything : bool
        Whether a new session was started for `process_name`
    '''
    session_exists, pid_file_exists, pid, pid_exists = _check_status(process_name)
    if session_exists and not pid_exists:
        info(f"Session exists for {process_name}, but process is not running. Recreating session...")
        _shutdown_helper(process_name)
    elif session_exists and pid_exists:
        info(f"Session for {process_name} exists, {executable_name} is running as pid {pid}")
        return
    else:
        info(f"Session {process_name} does not exist")
    execpath = f"/opt/MagAOX/bin/{executable_name}"
    if not os.path.exists(execpath):
        raise RuntimeError(
            f"No executable {execpath} found for {process_name}")
    _run_as_xsup(f"tmux new -s {process_name} -d")
    success(f"Created tmux session for {process_name}")
    cmd = f"{execpath} -n {process_name}"
    _run_as_xsup(f"tmux send-keys -t {process_name} \"{cmd}\" Enter")
    success(f"Executed in {process_name} session: '{cmd}'")
    return True

def _identify_indiserver_name(names, role):
    if "is" + role.upper() in names:
        return "is" + role.upper()

def validate_targets(processes, targets, role, for_restart=False):
    extra_targets = set()
    if not len(targets):
        targets = set(processes.keys())
    else:
        targets = set(targets)
        if for_restart:
            indiserver_name = _identify_indiserver_name(processes, role)
            if indiserver_name not in targets:
                targets.add(indiserver_name)
            for target_name in targets:
                for process_name in processes:
                    # restart downstream helper processes (foo-sw, foo-dark, foo-avg, etc.)
                    if process_name.startswith(target_name):
                        extra_targets.add(process_name)
        if not targets.issubset(processes.keys()):
            difference = targets - set(processes.keys())
            failure(f'Unknown process names: {difference}')
            sys.exit(1)

    return list(targets | extra_targets)

def startup(processes, targets, role):
    indi_server_name = _identify_indiserver_name(processes, role)

    if len(targets) > 1 and indi_server_name in targets:
        # special case for INDI server: needs to be last to start,
        # so that restarts don't overwhelm it
        targets.remove(indi_server_name)

    helpers = []
    for process_name in targets:
        th = threading.Thread(
            target=_startup_helper,
            args=(process_name, processes[process_name])
        )
        th.start()
        helpers.append(th)

    for th in helpers:
        th.join()

    if indi_server_name != None and not _session_exists(indi_server_name):
        # Now start indiserver
        info(f"Waiting 5 seconds before starting {indi_server_name}...")
        time.sleep(5)
        _indiserver_startup(indi_server_name, processes[indi_server_name])

    return 0


def restart(processes, targets, role):
    targets = validate_targets(processes, targets, role, for_restart=True)
    print(targets)
    exit_code_1 = shutdown(processes, targets, role)
    if exit_code_1 != 0:
        return exit_code_1
    return startup(processes, targets, role)

VERBS = {
    'status': status,
    'peek': peek,
    'shutdown': shutdown,
    'stop': shutdown,
    'restart': restart,
    'startup': startup,
    'start': startup,
}

VERBS_REQUIRING_ALL = ('shutdown', 'restart')
VERBS_REQUIRING_TARGET = ('stop', 'start')


def main():
    parser = argparse.ArgumentParser(prog='xctrl')
    parser.add_argument('-r', '--role', help='Specify role to read proclist for (default: $MAGAOX_ROLE)')
    subparsers = parser.add_subparsers(help='verb for action to take', dest='verb')
    for verb in VERBS:
        sp = subparsers.add_parser(verb)
        if verb in VERBS_REQUIRING_ALL:  # special case for confirmation
            sp.add_argument('--all', action='store_true', help="With no names provided, restarts all")
        if verb == 'inspect': # special case, can only inspect one thing at a time
            sp.add_argument('target', nargs=1, help='Process name to target')
        elif verb in VERBS_REQUIRING_TARGET:
            sp.add_argument('target', nargs='+', help='Process names to target')
        else:
            sp.add_argument('target', nargs='*', help='Process names to target')
    args = parser.parse_args()
    debug(f"Parsed args: {args}")

    if args.role is None:
        if 'MAGAOX_ROLE' not in os.environ:
            failure(f"No $MAGAOX_ROLE variable in environment and no --role option supplied")
            sys.exit(1)
        role = os.environ['MAGAOX_ROLE']
    else:
        role = args.role

    if args.verb is None:
        print(__doc__)
        parser.print_help()
        sys.exit(1)


    debug(f"Got role: {role}")
    processes_filepath = f"/opt/MagAOX/config/proclist_{role}.txt"
    processes = _read_processes(processes_filepath)
    debug(f'Read processes from {processes_filepath}: {processes}')

    verb = args.verb
    if verb in VERBS_REQUIRING_ALL:
        if len(args.target) == 0 and not args.all:
            failure(f"Specify --all to apply this verb to all processes")
            return 1
    elif verb in VERBS_REQUIRING_TARGET:
        if len(args.target) == 0:
            failure(f"No targets provided for {verb}")
            return 1
    targets = validate_targets(processes, args.target, role)
    debug(f'Got verb = {verb}, targets = {targets}')
    if verb not in VERBS:
        failure(f"Valid verbs: {', '.join(VERBS.keys())}")
        failure(f"Got: {verb}")
        return 1

    return VERBS[verb](processes, targets, role)

if __name__ == "__main__":
    sys.exit(main())
