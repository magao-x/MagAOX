#include <assert.h>
#include "../../../../tests/catch2/catch.hpp"
#include "../generated/logCodes.hpp"
#include "../types/{{name}}.hpp"
{% if hasGeneratedHfile %}
#include "../types/generated/{{name}}_generated.h"
{% endif %}
#include "../types/flatbuffer_log.hpp"

/*
 * GENERATED TEST FILE for types/{{name}}.hpp 
 * generated by generateTemplateCatch2Tests.py
 */
{% macro UPPER_FIRST_CHAR(text) %}{{ text[0]|upper}}{{text[1:] }}{% endmacro %}

{% for msgType in messageTypes %}
{% set outerLoopI = loop.index0 %}
{% for field in msgType %}
const {{field.type}} {{nameCamelCase}}{{UPPER_FIRST_CHAR(field.name)}}_{{outerLoopI}} = {{field.testVal}}; // dummy {{field.name}}
{% endfor %}


/** Class to encapsulate {{name}} flatbuffer data using
 ** => types/{{name}}.hpp
 ** => types/generated/{{name}}_generated.h
 **/
class {{className}}_{{outerLoopI}}
{
public:
  // Saved input parameter value; unused
  {% for field in msgType %}
  {{field.type}} m_save{{UPPER_FIRST_CHAR(classVarName)}}{{UPPER_FIRST_CHAR(field.name)}};
  {% endfor %}

  // Parameters retrieved from flatbuffer
  {% for field in msgType %}
  {{field.type}} m_{{field.name}};
  {% endfor %}

  // Flatbuffers verifier success/failure
  bool m_verify{false};

  // flatbuffer data length; used in ::verify
  int L;

  // Constructor
  {{className}}_{{loop.index0}}({%- for field in msgType -%}
  {%- if loop.last %}{{field.type}} {{field.name}}_
  {%- else -%}{{field.type}} {{field.name}}_, {% endif -%}
  {%- endfor -%}
  ) {
    // Save input parameters
    {% for field in msgType %}
    m_save{{UPPER_FIRST_CHAR(classVarName)}}{{UPPER_FIRST_CHAR(field.name)}} = {{field.name}}_;
    {% endfor %}

    // Create the flatbuffer messageT using the input parameters
    auto {{classVarName}} = MagAOX::logger::{{name}}::messageT({%- for field in msgType -%}
    {%- if loop.last %}{{field.name}}_
    {%- else -%}{{field.name}}_, {% endif -%}
    {%- endfor -%});

    // Retrieve flatbuffer pointer (if not an empty_log type) and length
    {% if "empty_log" not in baseType %}
    void* buffPtr = {{classVarName}}.builder.GetBufferPointer();
    {% endif %}
    L = MagAOX::logger::{{name}}::length({{classVarName}});

    // Retrieve the flatbuffer parameters for Catch2 comparison below
    {%for field in msgType %}
    {% if "schemaName" in field %}
    {% set getter = field.schemaName %}
    {% else %}
    {% set getter = field.name %}
    {% endif %}
    {% if schemaTableName != "" %}
    {% set fbName = schemaTableName %}
    {% else %}
    {% set fbName = UPPER_FIRST_CHAR(name) + "_fb" %}
    {% endif %}
    {% if "std::vector" in field.type %}
    {% if "std::string" in field.vectorType %}
    {% set pushVal = "it->str()" %}
    {% else %}
    {% set pushVal = "*it" %}
    {% endif %}
    if (MagAOX::logger::Get{{fbName}}(buffPtr)->{{getter}}() != nullptr)
    {
      for(auto it = MagAOX::logger::Get{{fbName}}(buffPtr)->{{getter}}()->begin();
          it != MagAOX::logger::Get{{fbName}}(buffPtr)->{{getter}}()->end();
          ++it)
      {
        m_{{field.name}}.push_back({{pushVal}});
      }
    }
    {% elif 'std::string' in field.type %}
    m_{{field.name}} = std::string(MagAOX::logger::Get{{fbName}}(buffPtr)->{{getter}}()->c_str());
    {% elif 'char *' in field.type %}
    size_t {{field.name}}StrLen = strlen(MagAOX::logger::Get{{fbName}}(buffPtr)->{{getter}}()->c_str()) + 1;
    m_{{field.name}} = (char *) malloc({{field.name}}StrLen);
    strncpy(m_{{field.name}}, MagAOX::logger::Get{{fbName}}(buffPtr)->{{getter}}()->c_str(), {{field.name}}StrLen);
    {% else %}
    m_{{field.name}} = MagAOX::logger::Get{{fbName}}(buffPtr)->{{getter}}();
    {% endif %}
    {% endfor %}

    // Run the {{name}} verifier
    m_verify = verify({{classVarName}});
  }

  // Run the flatbuffer Verifier for this log type
  // - requires bufferPtrT (shared_ptr<char*>) to full log entry
  //   comprising log header plus flatbuffer log message
  bool verify(const typename MagAOX::logger::{{name}}::messageT& msg) {

    // Timestamp, prioriy (use nominal value here)
    flatlogs::timespecX tsx{0,0};
    flatlogs::logPrioT prio{flatlogs::logPrio::LOG_DEFAULT};

    // Create full log: log header(*); log message (+)
    // * Log level (priority)
    // * Event code (implicit in <MagAOX::logger::type>)
    // * Timestamp
    // * Message size (variable length; 1, 2, or 8 bytes)
    // + Message (variable length)

    // N.G. allocates space and writes pointer value to logBuffer
    flatlogs::bufferPtrT logBuffer;
    {% if 'software_log' in name %}
    flatlogs::logHeader::createLog<MagAOX::logger::software_notice>(logBuffer
                                                             , tsx, msg
                                                             , prio);
    {% else %}
    flatlogs::logHeader::createLog<MagAOX::logger::{{name}}>(logBuffer
                                                             , tsx, msg
                                                             , prio);
    {% endif %}
    // Run full log through flatbuffer Verifier
    return MagAOX::logger::{{name}}::verify(logBuffer,L);
  }
};

SCENARIO( "Create {{name}} {{outerLoopI}}", "[a log item]")
{
    GIVEN("a {{name}} log code")
    {
        WHEN("random values for fields")
        {
            // Create flatbuffer
            {{className}}_{{outerLoopI}} {{classVarName}} = {{className}}_{{outerLoopI}}({%- for field in msgType -%}
            {%- set argName = nameCamelCase + UPPER_FIRST_CHAR(field.name) + "_" + outerLoopI|string -%}
            {# Need additional cast for char * types to bypass const #}
            {%- if "char *" in field.type %}
            {%- set argName = "(char *) " + argName -%}
            {%- endif -%}
            {%- if loop.last %}{{argName}}
            {%- else -%}{{argName}}, {% endif -%}
            {%- endfor -%}
            );
            // Compare flatbuffer parameters
            {% for field in msgType %}
            {% if 'char *' in field.type %}
            REQUIRE(strcmp({{classVarName}}.m_{{field.name}}, {{nameCamelCase}}{{UPPER_FIRST_CHAR(field.name)}}_{{outerLoopI}}) == 0);
            {% else %}
            REQUIRE({{classVarName}}.m_{{field.name}} == {{nameCamelCase}}{{UPPER_FIRST_CHAR(field.name)}}_{{outerLoopI}});
            {% endif %}
            {% endfor %}
            REQUIRE({{classVarName}}.m_verify);
        }
    }
}

{% endfor %}